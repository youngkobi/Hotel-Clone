import { UNSAFE_DataWithResponseInit, AppLoadContext } from 'react-router';
import { RequestStateWithRedirectUrls } from './types.js';
import '@clerk/backend';
import '@clerk/backend/internal';
import '@clerk/types';

declare function isResponse(value: any): value is Response;
declare function isDataWithResponseInit(value: any): value is UNSAFE_DataWithResponseInit<unknown>;
declare function isRedirect(res: Response): boolean;
declare const parseCookies: (req: Request) => Record<string, string>;
declare function assertValidHandlerResult(val: any, error?: string): asserts val is Record<string, unknown> | null;
declare const injectRequestStateIntoResponse: (response: Response, requestState: RequestStateWithRedirectUrls, context: AppLoadContext) => Promise<Response>;
/**
 * Returns the clerk state object and observability headers to be injected into a loader response.
 *
 * @internal
 */
declare function getResponseClerkState(requestState: RequestStateWithRedirectUrls, context: AppLoadContext): {
    clerkState: {
        clerkState: {
            __internal_clerk_state: any;
        };
    };
    headers: Headers;
};
/**
 * Wraps obscured clerk internals with a readable `clerkState` key.
 * This is intended to be passed by the user into <ClerkProvider>
 *
 * @internal
 */
declare const wrapWithClerkState: (data: any) => {
    clerkState: {
        __internal_clerk_state: any;
    };
};
/**
 * Patches request to avoid duplex issues with unidici
 * For more information, see:
 * https://github.com/nodejs/node/issues/46221
 * https://github.com/whatwg/fetch/pull/1457
 * @internal
 */
declare const patchRequest: (request: Request) => Request;

export { assertValidHandlerResult, getResponseClerkState, injectRequestStateIntoResponse, isDataWithResponseInit, isRedirect, isResponse, parseCookies, patchRequest, wrapWithClerkState };
