import { LoaderFunctionArgs } from 'react-router';
import { RootAuthLoaderOptions } from './types.js';
import '@clerk/backend';
import '@clerk/backend/internal';
import '@clerk/types';

declare const loadOptions: (args: LoaderFunctionArgs, overrides?: RootAuthLoaderOptions) => {
    secretKey: string;
    machineSecretKey: string;
    publishableKey: string;
    jwtKey: string;
    apiUrl: string;
    domain: string;
    isSatellite: boolean;
    proxyUrl: string;
    signInUrl: string;
    signUpUrl: string;
    afterSignInUrl: string;
    afterSignUpUrl: string;
    signInForceRedirectUrl: string;
    signUpForceRedirectUrl: string;
    signInFallbackRedirectUrl: string;
    signUpFallbackRedirectUrl: string;
    loadUser?: boolean;
    loadSession?: boolean;
    loadOrganization?: boolean;
    audience?: string | string[] | undefined;
    authorizedParties?: string[] | undefined;
    redirectUrl?: string | null;
} | {
    secretKey: string;
    machineSecretKey: string;
    publishableKey: string;
    jwtKey: string;
    apiUrl: string;
    domain: string;
    isSatellite: boolean;
    proxyUrl: string;
    signInUrl: string;
    signUpUrl: string;
    afterSignInUrl: string;
    afterSignUpUrl: string;
    signInForceRedirectUrl: string;
    signUpForceRedirectUrl: string;
    signInFallbackRedirectUrl: string;
    signUpFallbackRedirectUrl: string;
    loadUser?: boolean;
    loadSession?: boolean;
    loadOrganization?: boolean;
    audience?: string | string[] | undefined;
    authorizedParties?: string[] | undefined;
    redirectUrl?: string | null;
} | {
    secretKey: string;
    machineSecretKey: string;
    publishableKey: string;
    jwtKey: string;
    apiUrl: string;
    domain: string;
    isSatellite: boolean;
    proxyUrl: string;
    signInUrl: string;
    signUpUrl: string;
    afterSignInUrl: string;
    afterSignUpUrl: string;
    signInForceRedirectUrl: string;
    signUpForceRedirectUrl: string;
    signInFallbackRedirectUrl: string;
    signUpFallbackRedirectUrl: string;
    loadUser?: boolean;
    loadSession?: boolean;
    loadOrganization?: boolean;
    audience?: string | string[] | undefined;
    authorizedParties?: string[] | undefined;
    redirectUrl?: string | null;
};

export { loadOptions };
