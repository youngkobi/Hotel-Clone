import { LoaderFunctionArgs } from 'react-router';
import { RootAuthLoaderOptions, RootAuthLoaderCallback, LoaderFunctionReturn } from './types.js';
import '@clerk/backend';
import '@clerk/backend/internal';
import '@clerk/types';

interface RootAuthLoader {
    <Options extends RootAuthLoaderOptions, Callback extends RootAuthLoaderCallback<Options>>(
    /**
     * Arguments passed to the loader function.
     */
    args: LoaderFunctionArgs, 
    /**
     * A loader function with authentication state made available to it. Allows you to fetch route data based on the user's authentication state.
     */
    callback: Callback, options?: Options): Promise<ReturnType<Callback>>;
    (args: LoaderFunctionArgs, options?: RootAuthLoaderOptions): Promise<LoaderFunctionReturn>;
}
/**
 * Makes authorization state available in your application by wrapping the root loader.
 *
 * @see https://clerk.com/docs/quickstarts/react-router
 */
declare const rootAuthLoader: RootAuthLoader;

export { rootAuthLoader };
