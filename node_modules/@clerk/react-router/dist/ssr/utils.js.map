{"version":3,"sources":["../../src/ssr/utils.ts"],"sourcesContent":["import { constants, debugRequestState } from '@clerk/backend/internal';\nimport cookie from 'cookie';\nimport type { AppLoadContext, UNSAFE_DataWithResponseInit } from 'react-router';\n\nimport { getPublicEnvVariables } from '../utils/env';\nimport type { RequestStateWithRedirectUrls } from './types';\n\nexport function isResponse(value: any): value is Response {\n  return (\n    value != null &&\n    typeof value.status === 'number' &&\n    typeof value.statusText === 'string' &&\n    typeof value.headers === 'object' &&\n    typeof value.body !== 'undefined'\n  );\n}\n\nexport function isDataWithResponseInit(value: any): value is UNSAFE_DataWithResponseInit<unknown> {\n  return (\n    typeof value === 'object' &&\n    value != null &&\n    'type' in value &&\n    'data' in value &&\n    'init' in value &&\n    value.type === 'DataWithResponseInit'\n  );\n}\n\nexport function isRedirect(res: Response): boolean {\n  return res.status >= 300 && res.status < 400;\n}\n\nexport const parseCookies = (req: Request) => {\n  return cookie.parse(req.headers.get('cookie') || '');\n};\n\nexport function assertValidHandlerResult(val: any, error?: string): asserts val is Record<string, unknown> | null {\n  if ((val !== null && typeof val !== 'object') || Array.isArray(val)) {\n    throw new Error(error || '');\n  }\n}\n\nexport const injectRequestStateIntoResponse = async (\n  response: Response,\n  requestState: RequestStateWithRedirectUrls,\n  context: AppLoadContext,\n) => {\n  const clone = new Response(response.body, response);\n  const data = await clone.json();\n\n  const { clerkState, headers } = getResponseClerkState(requestState, context);\n\n  // set the correct content-type header in case the user returned a `Response` directly\n  clone.headers.set(constants.Headers.ContentType, constants.ContentTypes.Json);\n  headers.forEach((value, key) => {\n    clone.headers.append(key, value);\n  });\n\n  return Response.json({ ...(data || {}), ...clerkState }, clone);\n};\n\n/**\n * Returns the clerk state object and observability headers to be injected into a loader response.\n *\n * @internal\n */\nexport function getResponseClerkState(requestState: RequestStateWithRedirectUrls, context: AppLoadContext) {\n  const { reason, message, isSignedIn, ...rest } = requestState;\n  const clerkState = wrapWithClerkState({\n    __clerk_ssr_state: rest.toAuth(),\n    __publishableKey: requestState.publishableKey,\n    __proxyUrl: requestState.proxyUrl,\n    __domain: requestState.domain,\n    __isSatellite: requestState.isSatellite,\n    __signInUrl: requestState.signInUrl,\n    __signUpUrl: requestState.signUpUrl,\n    __afterSignInUrl: requestState.afterSignInUrl,\n    __afterSignUpUrl: requestState.afterSignUpUrl,\n    __signInForceRedirectUrl: requestState.signInForceRedirectUrl,\n    __signUpForceRedirectUrl: requestState.signUpForceRedirectUrl,\n    __signInFallbackRedirectUrl: requestState.signInFallbackRedirectUrl,\n    __signUpFallbackRedirectUrl: requestState.signUpFallbackRedirectUrl,\n    __clerk_debug: debugRequestState(requestState),\n    __clerkJSUrl: getPublicEnvVariables(context).clerkJsUrl,\n    __clerkJSVersion: getPublicEnvVariables(context).clerkJsVersion,\n    __telemetryDisabled: getPublicEnvVariables(context).telemetryDisabled,\n    __telemetryDebug: getPublicEnvVariables(context).telemetryDebug,\n  });\n\n  return {\n    clerkState,\n    headers: requestState.headers,\n  };\n}\n\n/**\n * Wraps obscured clerk internals with a readable `clerkState` key.\n * This is intended to be passed by the user into <ClerkProvider>\n *\n * @internal\n */\nexport const wrapWithClerkState = (data: any) => {\n  return { clerkState: { __internal_clerk_state: { ...data } } };\n};\n\n/**\n * Patches request to avoid duplex issues with unidici\n * For more information, see:\n * https://github.com/nodejs/node/issues/46221\n * https://github.com/whatwg/fetch/pull/1457\n * @internal\n */\nexport const patchRequest = (request: Request) => {\n  const clonedRequest = new Request(request.url, {\n    headers: request.headers,\n    method: request.method,\n    redirect: request.redirect,\n    cache: request.cache,\n    signal: request.signal,\n  });\n\n  // If duplex is not set, set it to 'half' to avoid duplex issues with unidici\n  if (clonedRequest.method !== 'GET' && clonedRequest.body !== null && !('duplex' in clonedRequest)) {\n    (clonedRequest as unknown as { duplex: 'half' }).duplex = 'half';\n  }\n\n  return clonedRequest;\n};\n"],"mappings":";AAAA,SAAS,WAAW,yBAAyB;AAC7C,OAAO,YAAY;AAGnB,SAAS,6BAA6B;AAG/B,SAAS,WAAW,OAA+B;AACxD,SACE,SAAS,QACT,OAAO,MAAM,WAAW,YACxB,OAAO,MAAM,eAAe,YAC5B,OAAO,MAAM,YAAY,YACzB,OAAO,MAAM,SAAS;AAE1B;AAEO,SAAS,uBAAuB,OAA2D;AAChG,SACE,OAAO,UAAU,YACjB,SAAS,QACT,UAAU,SACV,UAAU,SACV,UAAU,SACV,MAAM,SAAS;AAEnB;AAEO,SAAS,WAAW,KAAwB;AACjD,SAAO,IAAI,UAAU,OAAO,IAAI,SAAS;AAC3C;AAEO,IAAM,eAAe,CAAC,QAAiB;AAC5C,SAAO,OAAO,MAAM,IAAI,QAAQ,IAAI,QAAQ,KAAK,EAAE;AACrD;AAEO,SAAS,yBAAyB,KAAU,OAA+D;AAChH,MAAK,QAAQ,QAAQ,OAAO,QAAQ,YAAa,MAAM,QAAQ,GAAG,GAAG;AACnE,UAAM,IAAI,MAAM,SAAS,EAAE;AAAA,EAC7B;AACF;AAEO,IAAM,iCAAiC,OAC5C,UACA,cACA,YACG;AACH,QAAM,QAAQ,IAAI,SAAS,SAAS,MAAM,QAAQ;AAClD,QAAM,OAAO,MAAM,MAAM,KAAK;AAE9B,QAAM,EAAE,YAAY,QAAQ,IAAI,sBAAsB,cAAc,OAAO;AAG3E,QAAM,QAAQ,IAAI,UAAU,QAAQ,aAAa,UAAU,aAAa,IAAI;AAC5E,UAAQ,QAAQ,CAAC,OAAO,QAAQ;AAC9B,UAAM,QAAQ,OAAO,KAAK,KAAK;AAAA,EACjC,CAAC;AAED,SAAO,SAAS,KAAK,EAAE,GAAI,QAAQ,CAAC,GAAI,GAAG,WAAW,GAAG,KAAK;AAChE;AAOO,SAAS,sBAAsB,cAA4C,SAAyB;AACzG,QAAM,EAAE,QAAQ,SAAS,YAAY,GAAG,KAAK,IAAI;AACjD,QAAM,aAAa,mBAAmB;AAAA,IACpC,mBAAmB,KAAK,OAAO;AAAA,IAC/B,kBAAkB,aAAa;AAAA,IAC/B,YAAY,aAAa;AAAA,IACzB,UAAU,aAAa;AAAA,IACvB,eAAe,aAAa;AAAA,IAC5B,aAAa,aAAa;AAAA,IAC1B,aAAa,aAAa;AAAA,IAC1B,kBAAkB,aAAa;AAAA,IAC/B,kBAAkB,aAAa;AAAA,IAC/B,0BAA0B,aAAa;AAAA,IACvC,0BAA0B,aAAa;AAAA,IACvC,6BAA6B,aAAa;AAAA,IAC1C,6BAA6B,aAAa;AAAA,IAC1C,eAAe,kBAAkB,YAAY;AAAA,IAC7C,cAAc,sBAAsB,OAAO,EAAE;AAAA,IAC7C,kBAAkB,sBAAsB,OAAO,EAAE;AAAA,IACjD,qBAAqB,sBAAsB,OAAO,EAAE;AAAA,IACpD,kBAAkB,sBAAsB,OAAO,EAAE;AAAA,EACnD,CAAC;AAED,SAAO;AAAA,IACL;AAAA,IACA,SAAS,aAAa;AAAA,EACxB;AACF;AAQO,IAAM,qBAAqB,CAAC,SAAc;AAC/C,SAAO,EAAE,YAAY,EAAE,wBAAwB,EAAE,GAAG,KAAK,EAAE,EAAE;AAC/D;AASO,IAAM,eAAe,CAAC,YAAqB;AAChD,QAAM,gBAAgB,IAAI,QAAQ,QAAQ,KAAK;AAAA,IAC7C,SAAS,QAAQ;AAAA,IACjB,QAAQ,QAAQ;AAAA,IAChB,UAAU,QAAQ;AAAA,IAClB,OAAO,QAAQ;AAAA,IACf,QAAQ,QAAQ;AAAA,EAClB,CAAC;AAGD,MAAI,cAAc,WAAW,SAAS,cAAc,SAAS,QAAQ,EAAE,YAAY,gBAAgB;AACjG,IAAC,cAAgD,SAAS;AAAA,EAC5D;AAEA,SAAO;AACT;","names":[]}