// src/ssr/rootAuthLoader.ts
import { decorateObjectWithResources } from "@clerk/backend/internal";
import { invalidRootLoaderCallbackReturn } from "../utils/errors.js";
import { authenticateRequest } from "./authenticateRequest.js";
import { loadOptions } from "./loadOptions.js";
import {
  assertValidHandlerResult,
  injectRequestStateIntoResponse,
  isDataWithResponseInit,
  isRedirect,
  isResponse
} from "./utils.js";
var rootAuthLoader = async (args, handlerOrOptions, options) => {
  var _a;
  const handler = typeof handlerOrOptions === "function" ? handlerOrOptions : void 0;
  const opts = options ? options : !!handlerOrOptions && typeof handlerOrOptions !== "function" ? handlerOrOptions : {};
  const loadedOptions = loadOptions(args, opts);
  const _requestState = await authenticateRequest(args, loadedOptions);
  const requestState = { ...loadedOptions, ..._requestState };
  if (!handler) {
    return injectRequestStateIntoResponse(new Response(JSON.stringify({})), requestState, args.context);
  }
  const authObj = requestState.toAuth();
  const requestWithAuth = Object.assign(args.request, { auth: authObj });
  await decorateObjectWithResources(requestWithAuth, authObj, loadedOptions);
  const handlerResult = await handler(args);
  assertValidHandlerResult(handlerResult, invalidRootLoaderCallbackReturn);
  if (isResponse(handlerResult)) {
    try {
      if (isRedirect(handlerResult)) {
        return handlerResult;
      }
      return injectRequestStateIntoResponse(handlerResult, requestState, args.context);
    } catch {
      throw new Error(invalidRootLoaderCallbackReturn);
    }
  }
  if (isDataWithResponseInit(handlerResult)) {
    try {
      return injectRequestStateIntoResponse(
        new Response(JSON.stringify(handlerResult.data), (_a = handlerResult.init) != null ? _a : void 0),
        requestState,
        args.context
      );
    } catch {
      throw new Error(invalidRootLoaderCallbackReturn);
    }
  }
  const responseBody = JSON.stringify(handlerResult != null ? handlerResult : {});
  return injectRequestStateIntoResponse(new Response(responseBody), requestState, args.context);
};
export {
  rootAuthLoader
};
//# sourceMappingURL=rootAuthLoader.js.map