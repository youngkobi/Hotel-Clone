{"version":3,"sources":["../../src/ssr/loadOptions.ts"],"sourcesContent":["import { createClerkRequest } from '@clerk/backend/internal';\nimport { apiUrlFromPublishableKey } from '@clerk/shared/apiUrlFromPublishableKey';\nimport { getEnvVariable } from '@clerk/shared/getEnvVariable';\nimport { isDevelopmentFromSecretKey } from '@clerk/shared/keys';\nimport { isHttpOrHttps, isProxyUrlRelative } from '@clerk/shared/proxy';\nimport { handleValueOrFn } from '@clerk/shared/utils';\nimport type { LoaderFunctionArgs } from 'react-router';\n\nimport { getPublicEnvVariables } from '../utils/env';\nimport { noSecretKeyError, satelliteAndMissingProxyUrlAndDomain, satelliteAndMissingSignInUrl } from '../utils/errors';\nimport type { RootAuthLoaderOptions } from './types';\nimport { patchRequest } from './utils';\n\nexport const loadOptions = (args: LoaderFunctionArgs, overrides: RootAuthLoaderOptions = {}) => {\n  const { request, context } = args;\n  const clerkRequest = createClerkRequest(patchRequest(request));\n\n  // Fetch environment variables across React Router runtime.\n  // 1. First check if the user passed the key in the getAuth() function or the rootAuthLoader().\n  // 2. Then try from process.env if exists (Node).\n  // 3. Then try from import.meta.env if exists (Vite).\n  // 4. Then try from globalThis (Cloudflare Workers).\n  // 5. Then from loader context (Cloudflare Pages).\n  const secretKey = overrides.secretKey || getEnvVariable('CLERK_SECRET_KEY', context);\n  const machineSecretKey = overrides.machineSecretKey || getEnvVariable('CLERK_MACHINE_SECRET_KEY', context);\n  const publishableKey = overrides.publishableKey || getPublicEnvVariables(context).publishableKey;\n  const jwtKey = overrides.jwtKey || getEnvVariable('CLERK_JWT_KEY', context);\n  const apiUrl = getEnvVariable('CLERK_API_URL', context) || apiUrlFromPublishableKey(publishableKey);\n  const domain = handleValueOrFn(overrides.domain, new URL(request.url)) || getPublicEnvVariables(context).domain;\n  const isSatellite =\n    handleValueOrFn(overrides.isSatellite, new URL(request.url)) || getPublicEnvVariables(context).isSatellite;\n  const relativeOrAbsoluteProxyUrl = handleValueOrFn(\n    overrides?.proxyUrl,\n    clerkRequest.clerkUrl,\n    getPublicEnvVariables(context).proxyUrl,\n  );\n  const signInUrl = overrides.signInUrl || getPublicEnvVariables(context).signInUrl;\n  const signUpUrl = overrides.signUpUrl || getPublicEnvVariables(context).signUpUrl;\n  const signInForceRedirectUrl =\n    overrides.signInForceRedirectUrl || getPublicEnvVariables(context).signInForceRedirectUrl;\n  const signUpForceRedirectUrl =\n    overrides.signUpForceRedirectUrl || getPublicEnvVariables(context).signUpForceRedirectUrl;\n  const signInFallbackRedirectUrl =\n    overrides.signInFallbackRedirectUrl || getPublicEnvVariables(context).signInFallbackRedirectUrl;\n  const signUpFallbackRedirectUrl =\n    overrides.signUpFallbackRedirectUrl || getPublicEnvVariables(context).signUpFallbackRedirectUrl;\n  const afterSignInUrl = overrides.afterSignInUrl || getPublicEnvVariables(context).afterSignInUrl;\n  const afterSignUpUrl = overrides.afterSignUpUrl || getPublicEnvVariables(context).afterSignUpUrl;\n\n  let proxyUrl;\n  if (!!relativeOrAbsoluteProxyUrl && isProxyUrlRelative(relativeOrAbsoluteProxyUrl)) {\n    proxyUrl = new URL(relativeOrAbsoluteProxyUrl, clerkRequest.clerkUrl).toString();\n  } else {\n    proxyUrl = relativeOrAbsoluteProxyUrl;\n  }\n\n  if (!secretKey) {\n    throw new Error(noSecretKeyError);\n  }\n  if (isSatellite && !proxyUrl && !domain) {\n    throw new Error(satelliteAndMissingProxyUrlAndDomain);\n  }\n  if (isSatellite && !isHttpOrHttps(signInUrl) && isDevelopmentFromSecretKey(secretKey)) {\n    throw new Error(satelliteAndMissingSignInUrl);\n  }\n\n  return {\n    // used to append options that are not initialized from env\n    ...overrides,\n    secretKey,\n    machineSecretKey,\n    publishableKey,\n    jwtKey,\n    apiUrl,\n    domain,\n    isSatellite,\n    proxyUrl,\n    signInUrl,\n    signUpUrl,\n    afterSignInUrl,\n    afterSignUpUrl,\n    signInForceRedirectUrl,\n    signUpForceRedirectUrl,\n    signInFallbackRedirectUrl,\n    signUpFallbackRedirectUrl,\n  };\n};\n"],"mappings":";AAAA,SAAS,0BAA0B;AACnC,SAAS,gCAAgC;AACzC,SAAS,sBAAsB;AAC/B,SAAS,kCAAkC;AAC3C,SAAS,eAAe,0BAA0B;AAClD,SAAS,uBAAuB;AAGhC,SAAS,6BAA6B;AACtC,SAAS,kBAAkB,sCAAsC,oCAAoC;AAErG,SAAS,oBAAoB;AAEtB,IAAM,cAAc,CAAC,MAA0B,YAAmC,CAAC,MAAM;AAC9F,QAAM,EAAE,SAAS,QAAQ,IAAI;AAC7B,QAAM,eAAe,mBAAmB,aAAa,OAAO,CAAC;AAQ7D,QAAM,YAAY,UAAU,aAAa,eAAe,oBAAoB,OAAO;AACnF,QAAM,mBAAmB,UAAU,oBAAoB,eAAe,4BAA4B,OAAO;AACzG,QAAM,iBAAiB,UAAU,kBAAkB,sBAAsB,OAAO,EAAE;AAClF,QAAM,SAAS,UAAU,UAAU,eAAe,iBAAiB,OAAO;AAC1E,QAAM,SAAS,eAAe,iBAAiB,OAAO,KAAK,yBAAyB,cAAc;AAClG,QAAM,SAAS,gBAAgB,UAAU,QAAQ,IAAI,IAAI,QAAQ,GAAG,CAAC,KAAK,sBAAsB,OAAO,EAAE;AACzG,QAAM,cACJ,gBAAgB,UAAU,aAAa,IAAI,IAAI,QAAQ,GAAG,CAAC,KAAK,sBAAsB,OAAO,EAAE;AACjG,QAAM,6BAA6B;AAAA,IACjC,uCAAW;AAAA,IACX,aAAa;AAAA,IACb,sBAAsB,OAAO,EAAE;AAAA,EACjC;AACA,QAAM,YAAY,UAAU,aAAa,sBAAsB,OAAO,EAAE;AACxE,QAAM,YAAY,UAAU,aAAa,sBAAsB,OAAO,EAAE;AACxE,QAAM,yBACJ,UAAU,0BAA0B,sBAAsB,OAAO,EAAE;AACrE,QAAM,yBACJ,UAAU,0BAA0B,sBAAsB,OAAO,EAAE;AACrE,QAAM,4BACJ,UAAU,6BAA6B,sBAAsB,OAAO,EAAE;AACxE,QAAM,4BACJ,UAAU,6BAA6B,sBAAsB,OAAO,EAAE;AACxE,QAAM,iBAAiB,UAAU,kBAAkB,sBAAsB,OAAO,EAAE;AAClF,QAAM,iBAAiB,UAAU,kBAAkB,sBAAsB,OAAO,EAAE;AAElF,MAAI;AACJ,MAAI,CAAC,CAAC,8BAA8B,mBAAmB,0BAA0B,GAAG;AAClF,eAAW,IAAI,IAAI,4BAA4B,aAAa,QAAQ,EAAE,SAAS;AAAA,EACjF,OAAO;AACL,eAAW;AAAA,EACb;AAEA,MAAI,CAAC,WAAW;AACd,UAAM,IAAI,MAAM,gBAAgB;AAAA,EAClC;AACA,MAAI,eAAe,CAAC,YAAY,CAAC,QAAQ;AACvC,UAAM,IAAI,MAAM,oCAAoC;AAAA,EACtD;AACA,MAAI,eAAe,CAAC,cAAc,SAAS,KAAK,2BAA2B,SAAS,GAAG;AACrF,UAAM,IAAI,MAAM,4BAA4B;AAAA,EAC9C;AAEA,SAAO;AAAA;AAAA,IAEL,GAAG;AAAA,IACH;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF;","names":[]}