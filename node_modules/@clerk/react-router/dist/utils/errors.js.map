{"version":3,"sources":["../../src/utils/errors.ts"],"sourcesContent":["const createErrorMessage = (msg: string) => {\n  return `ðŸ”’ Clerk: ${msg.trim()}\n\nFor more info, check out the docs: https://clerk.com/docs,\nor come say hi in our discord server: https://clerk.com/discord\n`;\n};\n\nconst ssrExample = `Use 'rootAuthLoader' as your root loader. Then, add <ClerkProvider> to your app.\nExample:\n\nimport { rootAuthLoader } from '@clerk/react-router/ssr.server'\nimport { ClerkProvider } from '@clerk/react-router'\n\nexport async function loader(args: Route.LoaderArgs) {\n  return rootAuthLoader(args)\n}\n\nexport default function App({ loaderData }: Route.ComponentProps) {\n  return (\n    <ClerkProvider loaderData={loaderData}>\n      <Outlet />\n    </ClerkProvider>\n  )\n}\n`;\n\nexport const invalidClerkStatePropError = createErrorMessage(`\nYou're trying to pass an invalid object in \"<ClerkProvider clerkState={...}>\".\n\n${ssrExample}\n`);\n\nexport const noClerkStateError = createErrorMessage(`\nLooks like you didn't pass 'clerkState' to \"<ClerkProvider clerkState={...}>\".\n\n${ssrExample}\n`);\n\nexport const noLoaderArgsPassedInGetAuth = createErrorMessage(`\nYou're calling 'getAuth()' from a loader, without providing the loader args object.\nExample:\n\nexport async function loader(args: Route.LoaderArgs) {\n  const { userId } = await getAuth(args)\n\n  // Your code here\n}\n`);\n\nexport const invalidRootLoaderCallbackReturn = createErrorMessage(`\nYou're returning an invalid response from the 'rootAuthLoader' inside root.tsx.\nYou can only return plain objects, Responses created using the React Router 'data()'helper or\ncustom redirect 'Response' instances (status codes in the range of 300 to 400).\nIf you want to return a primitive value or an array, you can always wrap the response with an object.\n\nExample:\n\nexport async function loader(args: Route.LoaderArgs) {\n  return rootAuthLoader(args, async ({ auth }) => {\n    const { userId } = auth;\n    const posts = await database.getPostsByUserId(userId);\n\n    return { data: posts }\n    // Or\n    return data(posts, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    })\n  })\n}\n`);\n\nexport const noSecretKeyError = createErrorMessage(`\nA secretKey must be provided in order to use SSR and the exports from @clerk/react-router/api.');\nIf your runtime supports environment variables, you can add a CLERK_SECRET_KEY variable to your config.\nOtherwise, you can pass a secretKey parameter to rootAuthLoader or getAuth.\n`);\n\nexport const satelliteAndMissingProxyUrlAndDomain = createErrorMessage(\n  `Missing domain and proxyUrl. A satellite application needs to specify a domain or a proxyUrl`,\n);\n\nexport const satelliteAndMissingSignInUrl = createErrorMessage(`\nInvalid signInUrl. A satellite application requires a signInUrl for development instances.\nCheck if signInUrl is missing from your configuration or if it is not an absolute URL.`);\n\nexport const publishableKeyMissingErrorInSpaMode = createErrorMessage(`\nYou're trying to use Clerk in React Router SPA Mode without providing a Publishable Key.\nPlease provide the publishableKey prop on the <ClerkProvider> component.\n\nExample:\n\n<ClerkProvider publishableKey={PUBLISHABLE_KEY}>\n`);\n"],"mappings":";AAAA,IAAM,qBAAqB,CAAC,QAAgB;AAC1C,SAAO,oBAAa,IAAI,KAAK,CAAC;AAAA;AAAA;AAAA;AAAA;AAKhC;AAEA,IAAM,aAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmBZ,IAAM,6BAA6B,mBAAmB;AAAA;AAAA;AAAA,EAG3D,UAAU;AAAA,CACX;AAEM,IAAM,oBAAoB,mBAAmB;AAAA;AAAA;AAAA,EAGlD,UAAU;AAAA,CACX;AAEM,IAAM,8BAA8B,mBAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAS7D;AAEM,IAAM,kCAAkC,mBAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAsBjE;AAEM,IAAM,mBAAmB,mBAAmB;AAAA;AAAA;AAAA;AAAA,CAIlD;AAEM,IAAM,uCAAuC;AAAA,EAClD;AACF;AAEO,IAAM,+BAA+B,mBAAmB;AAAA;AAAA,uFAEwB;AAEhF,IAAM,sCAAsC,mBAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAOrE;","names":[]}