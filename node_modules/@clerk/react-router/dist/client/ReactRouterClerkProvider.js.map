{"version":3,"sources":["../../src/client/ReactRouterClerkProvider.tsx"],"sourcesContent":["import { ClerkProvider as ReactClerkProvider } from '@clerk/clerk-react';\nimport React from 'react';\n\nimport {\n  assertPublishableKeyInSpaMode,\n  assertValidClerkState,\n  isSpaMode as _isSpaMode,\n  warnForSsr,\n} from '../utils/assert';\nimport { ClerkReactRouterOptionsProvider } from './ReactRouterOptionsContext';\nimport type { ClerkState, ReactRouterClerkProviderProps } from './types';\nimport { useAwaitableNavigate } from './useAwaitableNavigate';\n\nexport * from '@clerk/clerk-react';\n\nconst SDK_METADATA = {\n  name: PACKAGE_NAME,\n  version: PACKAGE_VERSION,\n};\n\n/**\n * React Router hydration errors should not stop Clerk navigation from working, as the components mount only after\n * hydration is done (in the case of a hydration error, the components will simply mount after client-side hydration).\n */\nconst awaitableNavigateRef: { current: ReturnType<typeof useAwaitableNavigate> | undefined } = { current: undefined };\n\n/**\n * Internal type that includes the initial state prop that is passed to the ClerkProvider during SSR.\n * This is a value that we pass automatically so it does not need to pollute the public API.\n */\ntype ClerkProviderPropsWithState = ReactRouterClerkProviderProps & {\n  clerkState?: ClerkState;\n};\n\nfunction ClerkProviderBase({ children, ...rest }: ClerkProviderPropsWithState) {\n  const awaitableNavigate = useAwaitableNavigate();\n  const isSpaMode = _isSpaMode();\n\n  React.useEffect(() => {\n    awaitableNavigateRef.current = awaitableNavigate;\n  }, [awaitableNavigate]);\n\n  const { clerkState, ...restProps } = rest;\n  ReactClerkProvider.displayName = 'ReactClerkProvider';\n\n  if (typeof isSpaMode !== 'undefined' && !isSpaMode) {\n    assertValidClerkState(clerkState);\n  }\n\n  const {\n    __clerk_ssr_state,\n    __publishableKey,\n    __proxyUrl,\n    __domain,\n    __isSatellite,\n    __clerk_debug,\n    __signInUrl,\n    __signUpUrl,\n    __afterSignInUrl,\n    __afterSignUpUrl,\n    __signInForceRedirectUrl,\n    __signUpForceRedirectUrl,\n    __signInFallbackRedirectUrl,\n    __signUpFallbackRedirectUrl,\n    __clerkJSUrl,\n    __clerkJSVersion,\n    __telemetryDisabled,\n    __telemetryDebug,\n  } = clerkState?.__internal_clerk_state || {};\n\n  React.useEffect(() => {\n    if (typeof isSpaMode !== 'undefined' && !isSpaMode) {\n      warnForSsr(clerkState);\n    }\n  }, []);\n\n  React.useEffect(() => {\n    (window as any).__clerk_debug = __clerk_debug;\n  }, []);\n\n  const mergedProps = {\n    publishableKey: __publishableKey as any,\n    proxyUrl: __proxyUrl as any,\n    domain: __domain as any,\n    isSatellite: __isSatellite,\n    signInUrl: __signInUrl,\n    signUpUrl: __signUpUrl,\n    afterSignInUrl: __afterSignInUrl,\n    afterSignUpUrl: __afterSignUpUrl,\n    signInForceRedirectUrl: __signInForceRedirectUrl,\n    signUpForceRedirectUrl: __signUpForceRedirectUrl,\n    signInFallbackRedirectUrl: __signInFallbackRedirectUrl,\n    signUpFallbackRedirectUrl: __signUpFallbackRedirectUrl,\n    clerkJSUrl: __clerkJSUrl,\n    clerkJSVersion: __clerkJSVersion,\n    telemetry: {\n      disabled: __telemetryDisabled,\n      debug: __telemetryDebug,\n    },\n  };\n\n  return (\n    <ClerkReactRouterOptionsProvider options={mergedProps}>\n      <ReactClerkProvider\n        routerPush={(to: string) => awaitableNavigateRef.current?.(to)}\n        routerReplace={(to: string) => awaitableNavigateRef.current?.(to, { replace: true })}\n        initialState={__clerk_ssr_state}\n        sdkMetadata={SDK_METADATA}\n        {...mergedProps}\n        {...restProps}\n      >\n        {children}\n      </ReactClerkProvider>\n    </ClerkReactRouterOptionsProvider>\n  );\n}\n\ntype ClerkReactRouterOptions = Partial<\n  Omit<ReactRouterClerkProviderProps, 'routerPush' | 'routerReplace' | 'clerkState'>\n>;\n\n// TODO: Remove \"any\" on loaderData type and use Route.ComponentProps from userland code\ntype ClerkProviderProps = ClerkReactRouterOptions & {\n  loaderData?: any;\n};\n\nexport const ClerkProvider = ({ children, loaderData, ...opts }: ClerkProviderProps) => {\n  let clerkState;\n  const isSpaMode = _isSpaMode();\n\n  // Don't use `loaderData` to fetch the clerk state if we're in SPA mode or if React Router is used as a library\n  if (!isSpaMode && loaderData?.clerkState) {\n    clerkState = loaderData.clerkState;\n  }\n\n  // In SPA mode the publishable key is required on the ClerkProvider\n  if (typeof isSpaMode !== 'undefined' && isSpaMode) {\n    assertPublishableKeyInSpaMode(opts.publishableKey);\n  }\n\n  return (\n    <ClerkProviderBase\n      {...(opts as ReactRouterClerkProviderProps)}\n      clerkState={clerkState}\n    >\n      {children}\n    </ClerkProviderBase>\n  );\n};\n"],"mappings":";AAAA,SAAS,iBAAiB,0BAA0B;AACpD,OAAO,WAAW;AAElB;AAAA,EACE;AAAA,EACA;AAAA,EACA,aAAa;AAAA,EACb;AAAA,OACK;AACP,SAAS,uCAAuC;AAEhD,SAAS,4BAA4B;AAErC,cAAc;AAEd,IAAM,eAAe;AAAA,EACnB,MAAM;AAAA,EACN,SAAS;AACX;AAMA,IAAM,uBAAyF,EAAE,SAAS,OAAU;AAUpH,SAAS,kBAAkB,EAAE,UAAU,GAAG,KAAK,GAAgC;AAC7E,QAAM,oBAAoB,qBAAqB;AAC/C,QAAM,YAAY,WAAW;AAE7B,QAAM,UAAU,MAAM;AACpB,yBAAqB,UAAU;AAAA,EACjC,GAAG,CAAC,iBAAiB,CAAC;AAEtB,QAAM,EAAE,YAAY,GAAG,UAAU,IAAI;AACrC,qBAAmB,cAAc;AAEjC,MAAI,OAAO,cAAc,eAAe,CAAC,WAAW;AAClD,0BAAsB,UAAU;AAAA,EAClC;AAEA,QAAM;AAAA,IACJ;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF,KAAI,yCAAY,2BAA0B,CAAC;AAE3C,QAAM,UAAU,MAAM;AACpB,QAAI,OAAO,cAAc,eAAe,CAAC,WAAW;AAClD,iBAAW,UAAU;AAAA,IACvB;AAAA,EACF,GAAG,CAAC,CAAC;AAEL,QAAM,UAAU,MAAM;AACpB,IAAC,OAAe,gBAAgB;AAAA,EAClC,GAAG,CAAC,CAAC;AAEL,QAAM,cAAc;AAAA,IAClB,gBAAgB;AAAA,IAChB,UAAU;AAAA,IACV,QAAQ;AAAA,IACR,aAAa;AAAA,IACb,WAAW;AAAA,IACX,WAAW;AAAA,IACX,gBAAgB;AAAA,IAChB,gBAAgB;AAAA,IAChB,wBAAwB;AAAA,IACxB,wBAAwB;AAAA,IACxB,2BAA2B;AAAA,IAC3B,2BAA2B;AAAA,IAC3B,YAAY;AAAA,IACZ,gBAAgB;AAAA,IAChB,WAAW;AAAA,MACT,UAAU;AAAA,MACV,OAAO;AAAA,IACT;AAAA,EACF;AAEA,SACE,oCAAC,mCAAgC,SAAS,eACxC;AAAA,IAAC;AAAA;AAAA,MACC,YAAY,CAAC,OAAY;AAxGjC;AAwGoC,0CAAqB,YAArB,8CAA+B;AAAA;AAAA,MAC3D,eAAe,CAAC,OAAY;AAzGpC;AAyGuC,0CAAqB,YAArB,8CAA+B,IAAI,EAAE,SAAS,KAAK;AAAA;AAAA,MAClF,cAAc;AAAA,MACd,aAAa;AAAA,MACZ,GAAG;AAAA,MACH,GAAG;AAAA;AAAA,IAEH;AAAA,EACH,CACF;AAEJ;AAWO,IAAM,gBAAgB,CAAC,EAAE,UAAU,YAAY,GAAG,KAAK,MAA0B;AACtF,MAAI;AACJ,QAAM,YAAY,WAAW;AAG7B,MAAI,CAAC,cAAa,yCAAY,aAAY;AACxC,iBAAa,WAAW;AAAA,EAC1B;AAGA,MAAI,OAAO,cAAc,eAAe,WAAW;AACjD,kCAA8B,KAAK,cAAc;AAAA,EACnD;AAEA,SACE;AAAA,IAAC;AAAA;AAAA,MACE,GAAI;AAAA,MACL;AAAA;AAAA,IAEC;AAAA,EACH;AAEJ;","names":[]}